package com.essindia.stlapp.Activity;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.support.design.widget.TextInputLayout;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.essindia.stlapp.Adapter.PickupAdapter;
import com.essindia.stlapp.Bean.PickUpBean;
import com.essindia.stlapp.Bean.PickUpSummaryData;
import com.essindia.stlapp.CallService.CallService;
import com.essindia.stlapp.CallService.OnResponseFetchListener;
import com.essindia.stlapp.Constant.BundleKey;
import com.essindia.stlapp.Constant.ReqResParamKey;
import com.essindia.stlapp.R;
import com.essindia.stlapp.Sqlite.SqliteHelper;
import com.essindia.stlapp.Utils.AlertDialogManager;
import com.essindia.stlapp.Utils.ConnectionDetector;
import com.essindia.stlapp.Utils.Constants;
import com.essindia.stlapp.Utils.DateUtil;
import com.essindia.stlapp.Utils.UserPref;
import com.google.gson.Gson;
import com.honeywell.aidc.AidcManager;
import com.honeywell.aidc.BarcodeFailureEvent;
import com.honeywell.aidc.BarcodeReadEvent;
import com.honeywell.aidc.BarcodeReader;
import com.honeywell.aidc.InvalidScannerNameException;
import com.honeywell.aidc.ScannerUnavailableException;
import com.honeywell.aidc.TriggerStateChangeEvent;

import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class NewPickupList extends BaseActivity implements BarcodeReader.BarcodeListener, BarcodeReader.TriggerListener, OnResponseFetchListener {

    private ImageView imageView;
    private TextView mTvCustomerName, mTvPickNo, mTvPickDate;
    private RecyclerView recylerView;
    private static BarcodeReader bcr;
    private EditText editText;
    private TextInputLayout usernameET;
    private JSONObject jsonObjReqParam;
    private ConnectionDetector connectionDetector;
    private UserPref userPref;
    private SqliteHelper db;
    private LinearLayoutManager layoutManager;
    private PickupAdapter adapter;
    private PickUpBean bean;
    private String pickDate, pickNo, mOrgId;
    private Context context;
    private List<String> pickDateList = new ArrayList<>();
    private String mLocationDesc;
    private AidcManager manager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pickup_list);
        intializeXml();
    }

    @Override
    protected void onResume() {
        super.onResume();
        try {
            AidcManager.create(this, new AidcManager.CreatedCallback() {
                @Override
                public void onCreated(AidcManager aidcManager) {
                    manager = aidcManager;
                    try {
                        bcr = manager.createBarcodeReader();
                        bcr.claim();
                        barcodeScanner();
                    } catch (InvalidScannerNameException e) {
                        showToast("Invalid Scanner Name Exception: " + e.getMessage());
                    }
                    catch (ScannerUnavailableException e) {
                        showToast("Scanner unavailable" + e.getMessage());
                    }catch (Exception e) {
                        showToast("Exception: " + e.getMessage());
                    }
                }
            });
        } catch (IllegalArgumentException exp) {
            showToast("Your device is not compatible with QR Code scanner");
            Log.e("Loading scanner exp", exp.toString());
        } catch (Exception exp) {
            showToast("Your device is not compatible with QR Code scanner");
            Log.e("Loading scanner exp1", exp.toString());
        }
        editText.setText(""); // for reset incase when getting back from detail screen
        String pickupQrcodeData = userPref.getPickupQrcode();
        if (pickupQrcodeData.length() > 0) {
            dataSplitAndChecker(userPref.getPickupQrcode());
        }
    }

    private void intializeXml() {
        userPref = new UserPref(this);
        db = new SqliteHelper(this);
        connectionDetector = new ConnectionDetector(this);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(R.string.pickUp);
        toolbar.setTitleTextColor(ContextCompat.getColor(this, R.color.background));
        toolbar.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp);
        setSupportActionBar(toolbar);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                callBackScreen();
            }
        });
        imageView = (ImageView) findViewById(R.id.imageView);
        mTvCustomerName = (TextView) findViewById(R.id.tv_customer_name);
        mTvPickNo = (TextView) findViewById(R.id.tv_pick_no);
        mTvPickDate = (TextView) findViewById(R.id.tv_pick_date);
        recylerView = (RecyclerView) findViewById(R.id.recylerView);
        editText = (EditText) findViewById(R.id.editText);
        usernameET = (TextInputLayout) findViewById(R.id.usernameET);
        editText.setHint("Scan Pick QR Code");
        imageView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String data = editText.getText().toString();
                if (data != null && !data.isEmpty()) {
                    dataSplitAndChecker(data);
                } else {
                    AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "Please enter valid data");
                }
            }

        });

    }

    private void dataSplitAndChecker(String data) {
        String dataSp[] = data.split(Constants.DELIMITER);
        if (dataSp.length == 0) {
            AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "Qr code is empty cannot load data item");
        } else if (dataSp.length == 3) {
            mOrgId = dataSp[0].trim().toUpperCase();
            pickNo = dataSp[1].trim().toUpperCase();
            pickDate = dataSp[2].trim().toUpperCase();
            pickDate = DateUtil.ddMMyyyyToddMMMyyyy(pickDate);
            if (!pickDate.isEmpty()) {
                userPref.setPickupQrCode(data);
                pickListDataCallingFromServer(mOrgId, pickNo, pickDate);
            } else {
                Toast.makeText(NewPickupList.this, "Invalid Pick Date Format", Toast.LENGTH_LONG).show();
            }
        } else if (dataSp.length == 1) {
            mLocationDesc = dataSp[0].trim();
            if (!mLocationDesc.isEmpty()) {
                validateLocation(mLocationDesc);
            } else {
                Toast.makeText(NewPickupList.this, "Invalid Location QR Code", Toast.LENGTH_LONG).show();

            }
        } else {
            AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "Please enter correct format !");
        }
    }

    private void validateLocation(String locationDesc) {
        jsonObjReqParam = new JSONObject();
        try {
            jsonObjReqParam.put(Constants.auth_Token, userPref.getToken());
            jsonObjReqParam.put(ReqResParamKey.ORG_ID, userPref.getOrgId());
            jsonObjReqParam.put(ReqResParamKey.VC_USER_CODE, userPref.getUserName());
            jsonObjReqParam.put(ReqResParamKey.DEVICE_ID, userPref.getUserDeviceId());
            jsonObjReqParam.put(ReqResParamKey.PICK_NO, pickNo);
            jsonObjReqParam.put(ReqResParamKey.PICK_DATE, pickDate);
            jsonObjReqParam.put(ReqResParamKey.BIN_LOCATION, locationDesc);
            if (connectionDetector.isConnectingToInternet()) {
                CallService.getInstance().getResponseUsingPOST(NewPickupList.this, Constants.GET_PICKUP_LOCATION_VALIDATE, jsonObjReqParam.toString(), NewPickupList.this, Constants.PICK_UP_VALIDATE_LOCATION_REQ_ID, true);
            } else {
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "No internet connection.");
            }
        } catch (Exception e) {
            AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", e.toString());
        }
    }

    private void getLocationsItem(String locationDesc) {
        jsonObjReqParam = new JSONObject();
        try {
            jsonObjReqParam.put(Constants.auth_Token, userPref.getToken());
            jsonObjReqParam.put(ReqResParamKey.ORG_ID, userPref.getOrgId());
            jsonObjReqParam.put(ReqResParamKey.VC_USER_CODE, userPref.getUserName());
            jsonObjReqParam.put(ReqResParamKey.DEVICE_ID, userPref.getUserDeviceId());
            jsonObjReqParam.put(ReqResParamKey.PICK_NO, pickNo);
            jsonObjReqParam.put(ReqResParamKey.PICK_DATE, pickDate);
            jsonObjReqParam.put(ReqResParamKey.BIN_LOCATION, locationDesc);
            if (connectionDetector.isConnectingToInternet()) {
                CallService.getInstance().getResponseUsingPOST(NewPickupList.this, Constants.GET_PICKUP_LOCATIONS_ITEM, jsonObjReqParam.toString(), NewPickupList.this, Constants.PICK_UP_LOCATION_ITEM_REQ_ID, true);
            } else {
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "No internet connection.");
            }
        } catch (Exception e) {
            AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", e.toString());
        }
    }

    public void pickListDataCallingFromServer(String orgId, String pickNo, String pickDate) {
        jsonObjReqParam = new JSONObject();
        try {
            jsonObjReqParam.put(Constants.auth_Token, userPref.getToken());
            jsonObjReqParam.put(ReqResParamKey.ORG_ID, orgId);
            jsonObjReqParam.put(ReqResParamKey.PICK_NO, pickNo);
            jsonObjReqParam.put(ReqResParamKey.PICK_DATE, pickDate);
            if (connectionDetector.isConnectingToInternet()) {
                CallService.getInstance().getResponseUsingPOST(NewPickupList.this, Constants.GET_PICKUP_SUMMARY, jsonObjReqParam.toString(), NewPickupList.this, Constants.PICK_UP_SUMMARY_REQ_ID, true);
            } else {
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "No internet connection.");
            }
        } catch (Exception e) {
            AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", e.toString());
        }
    }

    private void pickListVerifier() {
        if (userPref.getOrgId() != null && pickNo != null && pickDate != null && !userPref.getOrgId().isEmpty() && !pickNo.isEmpty() && !pickDate.isEmpty()) {
            context = NewPickupList.this;
            ArrayList<PickUpSummaryData> beanList = db.checkIsPickDataAvailableInDb(userPref.getOrgId(), pickNo, pickDate, context);
            if (beanList != null) {
                editText.setText("");
                editText.setHint("Scan Location QR Code");
                usernameET.setHint("Scan Location QR Code");
                ArrayList<String> cName = new ArrayList<>();
                ArrayList<String> pNo = new ArrayList<>();
                ArrayList<String> pDate = new ArrayList<>();
                for (int i = 0; i < beanList.size(); i++) {
                    cName.add(beanList.get(i).getCUSTOMERNAME());
                }
                for (int i = 0; i < beanList.size(); i++) {
                    pNo.add(beanList.get(i).getPICKNO());
                }
                for (int i = 0; i < beanList.size(); i++) {
                    pDate.add(beanList.get(i).getPICKDATE());
                }
                mTvCustomerName.setText(cName.get(0));
                mTvPickNo.setText(pNo.get(0));
                mTvPickDate.setText(pDate.get(0));
                adapter = new PickupAdapter(getApplicationContext(), beanList);
                layoutManager = new LinearLayoutManager(getApplicationContext());
                recylerView.setLayoutManager(layoutManager);
                recylerView.setAdapter(adapter);
            } else {
                editText.setHint("Scan Pick QR Code");
                editText.setText("");
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "Data doesn't exist !");
            }
        } else {
            editText.setText("");
            AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", "Data is empty!");
        }
    }

    private void barcodeScanner() {
        try {
            if (bcr != null) {
                bcr.addBarcodeListener(this);
                bcr.addTriggerListener(this);
            } else {
                System.out.println("Device is not QR enabled");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onBarcodeEvent(final BarcodeReadEvent barcodeReadEvent) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                editText.setText(barcodeReadEvent.getBarcodeData());
               /* if (scanFlag == true) {
                    boxSplitter(barcodeReadEvent.getBarcodeData());
                    boxVerifier();
                } else {
                    dataSplite(barcodeReadEvent.getBarcodeData());
                }*/
                dataSplitAndChecker(barcodeReadEvent.getBarcodeData().toString().trim());
            }
        });
    }

    @Override
    protected void onPause() {
        super.onPause();
        try {
            if (bcr != null) {
                bcr.release();
            }
        } catch (NullPointerException npe) {
            npe.getStackTrace();
        }
    }

    @Override
    public void webserviceResponse(int request_id, String response) {
        if (request_id == Constants.PICK_UP_SUMMARY_REQ_ID) {
            if (response != null) {
                try {
                    Gson gson = new Gson();
                    bean = gson.fromJson(response, PickUpBean.class);
                    String messageCode = bean.getMessageCode();
                    String message = bean.getMessage();
                    if (messageCode.equalsIgnoreCase("0")) {
                        db.addPickUpList(bean.getData());
                        pickListVerifier();
                    } else {
                        confirmAlert("Alert", message);
                    }
                } catch (Exception e) {
                    AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", e.toString());
                }
            } else {
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", response.toString());
            }
        } else if (request_id == Constants.PICK_UP_VALIDATE_LOCATION_REQ_ID) {
            if (response != null) {
                try {
                    JSONObject result = new JSONObject(response);
                    String messageCode = result.optString(ReqResParamKey.MessageCode);
                    String message = result.optString(ReqResParamKey.Message);
                    if (messageCode.equalsIgnoreCase("0")) {
                        getLocationsItem(mLocationDesc);
                    } else {
                        editText.setText("");
                        showAlert("Alert", message);
                    }
                } catch (Exception e) {
                    AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", e.toString());
                }
            } else {
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", response.toString());
            }
        } else if (request_id == Constants.PICK_UP_LOCATION_ITEM_REQ_ID) {
            if (response != null) {
                try {
                    Gson gson = new Gson();
                    bean = gson.fromJson(response, PickUpBean.class);
                    String messageCode = bean.getMessageCode();
                    String message = bean.getMessage();
                    ArrayList<PickUpSummaryData> itemList = new ArrayList<>(bean.getData());
                    if (messageCode.equalsIgnoreCase("0")) {
                        Bundle b = new Bundle();
                        b.putParcelableArrayList(BundleKey.KEY_PU_ITEM_LIST, itemList);
                        b.putString(BundleKey.KEY_PU_LOCATION_CODE, mLocationDesc);
                        Intent form = new Intent(NewPickupList.this, PuLocItemListActivity.class);
                        form.putExtras(b);
                        startActivity(form);
                        overridePendingTransition(android.R.anim.slide_in_left, android.R.anim.slide_out_right);
                    } else {
                        showAlert("Alert", message);
                    }
                } catch (Exception e) {
                    AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", e.toString());
                }
            } else {
                AlertDialogManager.getInstance().simpleAlert(NewPickupList.this, "Alert", response.toString());
            }
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        callBackScreen();
    }

    private void callBackScreen() {
        Intent i = new Intent(NewPickupList.this, Dashboard.class);
        startActivity(i);
        overridePendingTransition(android.R.anim.slide_in_left, android.R.anim.slide_out_right);
        finish();
    }

    private void confirmAlert(String alert, String msg) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(alert);
        builder.setMessage(msg);
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                Intent i = new Intent(NewPickupList.this, Dashboard.class);
                startActivity(i);
                overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);
                finish();
            }
        });

        builder.create();
        builder.show();

    }

    private void showAlert(String alert, String msg) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(alert);
        builder.setMessage(msg);
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
            }
        });

        builder.create();
        builder.show();

    }

    @Override
    public void onFailureEvent(BarcodeFailureEvent barcodeFailureEvent) {

    }

    @Override
    public void onTriggerEvent(TriggerStateChangeEvent triggerStateChangeEvent) {

    }
}
